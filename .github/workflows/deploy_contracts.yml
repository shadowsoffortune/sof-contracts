name: Deploy contracts and update Vercel environment variables

on:
  push:
    branches:
      - staging
    
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: checkout project
      uses: actions/checkout@v3

    - name: use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: install dependencies
      run: npm install

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Configurer le fichier .env
      run: node scripts/createEnvFile.js
      env:
        SONIC_PRIVATE_KEY: ${{ secrets.SONIC_PRIVATE_KEY }}
        SONIC_TESTNET_URL: "https://rpc.sonic.fantom.network/"
        LOCALHOST_PRIVATE_KEY: ${{ secrets.LOCALHOST_PRIVATE_KEY }}
        DAPP_URL: ${{ vars.DAPP_URL }}
        VERCEL_AUTOMATION_BYPASS_SECRET: ${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}
        VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}

    - name: execute deploy script
      id: deploy_script
      run: |
        npx hardhat run scripts/deploy_and_create_world.ts --network sonicTestnet 2>&1 | tee script_output.txt

    - name: extract addresses 
      id: extract_addresses
      run: |
        GAME_ADDRESS=$(grep "NEXT_PUBLIC_GAME_ADDRESS=" script_output.txt | awk -F= '{print $2}')
        WORLD_ADDRESS=$(grep "NEXT_PUBLIC_WORLD_ADDRESS=" script_output.txt | awk -F= '{print $2}')
        HERO_ADDRESS=$(grep "NEXT_PUBLIC_HERO_ADDRESS=" script_output.txt | awk -F= '{print $2}')
        HEROENCOUNTERS_ADDRESS=$(grep "NEXT_PUBLIC_HEROENCOUNTERS_ADDRESS=" script_output.txt | awk -F= '{print $2}')
        HEROCLASSES_ADDRESS=$(grep "NEXT_PUBLIC_HEROCLASSES_ADDRESS=" script_output.txt | awk -F= '{print $2}')
        MONSTERS_ADDRESS=$(grep "NEXT_PUBLIC_MONSTERS_ADDRESS=" script_output.txt | awk -F= '{print $2}')
        HERO_INVENTORIES_ADDRESS=$(grep "NEXT_PUBLIC_HERO_INVENTORIES_ADDRESS=" script_output.txt | awk -F= '{print $2}')
        ITEMS_ADDRESS=$(grep "NEXT_PUBLIC_ITEMS_ADDRESS=" script_output.txt | awk -F= '{print $2}')

        echo "GAME_ADDRESS=$GAME_ADDRESS" >> $GITHUB_ENV
        echo "WORLD_ADDRESS=$WORLD_ADDRESS" >> $GITHUB_ENV
        echo "HERO_ADDRESS=$HERO_ADDRESS" >> $GITHUB_ENV
        echo "HEROENCOUNTERS_ADDRESS=$HEROENCOUNTERS_ADDRESS" >> $GITHUB_ENV
        echo "HEROCLASSES_ADDRESS=$HEROCLASSES_ADDRESS" >> $GITHUB_ENV
        echo "MONSTERS_ADDRESS=$MONSTERS_ADDRESS" >> $GITHUB_ENV
        echo "HERO_INVENTORIES_ADDRESS=$HERO_INVENTORIES_ADDRESS" >> $GITHUB_ENV
        echo "ITEMS_ADDRESS=$ITEMS_ADDRESS" >> $GITHUB_ENV

    - name: update env variables on Vercel
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
        GAME_ADDRESS: ${{ env.GAME_ADDRESS }}
        WORLD_ADDRESS: ${{ env.WORLD_ADDRESS }}
        HERO_ADDRESS: ${{ env.HERO_ADDRESS }}
        HEROENCOUNTERS_ADDRESS: ${{ env.HEROENCOUNTERS_ADDRESS }}
        HEROCLASSES_ADDRESS: ${{ env.HEROCLASSES_ADDRESS }}
        MONSTERS_ADDRESS: ${{ env.MONSTERS_ADDRESS }}
        HERO_INVENTORIES_ADDRESS: ${{ env.HERO_INVENTORIES_ADDRESS }}
        ITEMS_ADDRESS: ${{ env.ITEMS_ADDRESS }}
      run: |
        #!/usr/bin/env bash

        edit_env_var() {
            local key=$1
            local value=$2

            # Récupérer l'ID de la variable d'environnement existante
            API_URL="https://api.vercel.com/v9/projects/$VERCEL_PROJECT_ID/env?decrypt=false"
            if [ -n "$VERCEL_TEAM_ID" ]; then
                API_URL="$API_URL&teamId=$VERCEL_TEAM_ID"
            fi

            RESPONSE=$(curl -s -X GET "$API_URL" \
                -H "Authorization: Bearer $VERCEL_TOKEN" \
                -H "Content-Type: application/json")

            echo "$RESPONSE"

            ENV_ID=$(echo "$RESPONSE" | jq -r --arg key "$key" '.envs[] | select(.key==$key and (.target[] | select(.=="preview"))) | .id')

            echo "ENV_ID: $ENV_ID"

            if [ -n "$ENV_ID" ]; then
                # Construire l'URL pour éditer la variable d'environnement
                EDIT_URL="https://api.vercel.com/v9/projects/$VERCEL_PROJECT_ID/env/$ENV_ID"
                if [ -n "$VERCEL_TEAM_ID" ]; then
                    EDIT_URL="$EDIT_URL?teamId=$VERCEL_TEAM_ID"
                fi

                # Préparer le corps de la requête
                DATA=$(jq -n --arg key "$key" --arg value "$value" '{
                      "key": $key,
                      "value": $value,
                      "type": "encrypted",
                      "target": ["preview"],
                      "comment": "Variable mise à jour via GitHub Actions"
                    }')

                echo "$DATA"

                echo "call with $EDIT_URL"

                echo "curl -s -X PATCH $EDIT_URL -H 'Authorization Bearer $VERCEL_TOKEN' -H 'Content-Type: application/json' -d $DATA"

                # Éditer la variable d'environnement existante
                curl -s -X PATCH "$EDIT_URL" \
                    -H "Authorization: Bearer $VERCEL_TOKEN" \
                    -H "Content-Type: application/json" \
                    -d "$DATA"

                echo "Edited environment variable $key"
            else
                echo "Environment variable $key not found, cannot perform edit."
            fi
        }

        # Supprimer et recréer les secrets
        edit_env_var "NEXT_PUBLIC_GAME_ADDRESS" "$GAME_ADDRESS"
        edit_env_var "NEXT_PUBLIC_WORLD_ADDRESS" "$WORLD_ADDRESS"
        edit_env_var "NEXT_PUBLIC_HERO_ADDRESS" "$HERO_ADDRESS"
        edit_env_var "NEXT_PUBLIC_HEROENCOUNTERS_ADDRESS" "$HEROENCOUNTERS_ADDRESS"
        edit_env_var "NEXT_PUBLIC_HEROCLASSES_ADDRESS" "$HEROCLASSES_ADDRESS"
        edit_env_var "NEXT_PUBLIC_MONSTERS_ADDRESS" "$MONSTERS_ADDRESS"
        edit_env_var "NEXT_PUBLIC_HERO_INVENTORIES_ADDRESS" "$HERO_INVENTORIES_ADDRESS"
        edit_env_var "NEXT_PUBLIC_ITEMS_ADDRESS" "$ITEMS_ADDRESS"
